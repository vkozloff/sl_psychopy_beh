random_ssl_extracted$reindex <- reindex
# Remove targets with no response time
random_ssl_extracted <- random_ssl_extracted[!is.na(random_ssl_extracted$rt_col),]
# Calculate mean rt and rt_slope  -----------------------------------------------------------------------------------------------------
# Define variables
mean_rt <- NULL
rt_slope <- NULL
part_id <- NULL
domain <- NULL
modality <- NULL
type <- NULL
task <- NULL
new_RSSL<- NULL
rssl_range <- NULL
upper_bound <- NULL
lower_bound <- NULL
# For each participant, extract id
# Assign domain, type, and modality
# Calculate and record mean_rt and rt_slope
for(id in list_part_id){
part_id <- append(part_id, id)
domain <- append(domain, "auditory")
type <- append (type, "random")
modality <- append (modality, "linguistic")
mean_rt <- append(mean_rt, round(mean(random_ssl_extracted$rt_col[random_ssl_extracted$id==id]),digits=3))
task <- append (task, "ssl")
rt_slope <- append (rt_slope, round(summary(lm(random_ssl_extracted$rt_col[random_ssl_extracted$id==id]~random_ssl_extracted$reindex[random_ssl_extracted$id==id]))$coefficient[2,1],digits = 4))
data_this_id <- (random_ssl_extracted[ which(random_ssl_extracted$id==id),])
rssl_range<- range(data_this_id$rt_col, na.rm = TRUE)
upper_bound <- append (upper_bound,this_range[1])
lower_bound <- append (lower_bound,this_range[2])
}
# Combine data for each participant
new_RSSL <- data.frame(part_id,task, domain,type,modality,mean_rt, upper_bound, lower_bound, rt_slope)
# for internal checking only: find mean rt_slope
#mean_rssl_rt_slope <- mean (Rssl$rt_slope)
# ******************** CONDITION 4: RANDOM_TSL*******************
# Identify response times to target stimuli. Include times when participant responded while target was displayed, or during preceding/ following stimulus ---------------------------------------------
# Set up variables to loop through participants by trials and track the target
rt_col <- NULL
id <- NULL
trial <-NULL
target <- NULL
# Identify the rows when this condition's target was presented
random_tsl_targets <- which(tolower(trials_1_3$ttarget)==tolower(trials_1_3$soundFile))
# Isolate participants' response times.
# Include rows when the participant responded to stimuli adjacent to the target (i.e. any time that the participant pressed the button within one stimulus before or after the target)
for (i in random_tsl_targets) {
# Isolate the ID number
id <- append(id, paste(trials_1_3[i,]$PartID))
# If the participant responded while the target was presented
if (!is.na(trials_1_3[i,] [,"tone_block_key_resp.rt"])){
# Count their response time from the target stimulus
rt_col <- append (rt_col, trials_1_3[i,][,"tone_block_key_resp.rt"])}
# If the participant responded during the stimulus following the target
else if (!is.na(trials_1_3[i+1,] [,"tone_block_key_resp.rt"])){
# Count their response time as the duration that the target was presented (1000 ms) plus the response time to the following stimulus
rt_col[(match(i, random_tsl_targets))] <- 1+trials_1_3[i+1, ][,"tone_block_key_resp.rt"]}
# Check if you are looking at the first target, which is always the first stimulus. If so, it does not have a preceeding target
else if (i>0){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_1_3[i,][,"tone_block_key_resp.rt"])}
# If the participant responded during the stimulus preceding the target
else if (!is.na(trials_1_3[i-1,] [,"tone_block_key_resp.rt"])){
# Count their response time as how much sooner they responded than when the stimulus was presented
rt_col[match(i, random_tsl_targets)] <- 0-trials_1_3[i-1,][,"tone_block_key_resp.rt"]}
# If the participant did not respond to the target within the correct time frame
else if (is.na(trials_1_3[i,] [,"tone_block_key_resp.rt"])){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_1_3[i,][,"tone_block_key_resp.rt"])}
}
# Match id and response times
random_tsl_extracted <- data.frame(id,rt_col)
# Reindex the trial numbers for only trials with response times -----------------------------------------------------------------------------------------------------
# List unique participant IDs for this condition
list_part_id <- unique(random_tsl_extracted$id)
# Find the number of targets shown to each participant
a <- NULL
for(i in list_part_id){a <- append(a,sum(random_tsl_extracted$id==i))}
# For each participant, index the targets
reindex <- NULL
for (i in a) {reindex <- append (reindex, rep(1:i, 1))}
# Add the targets' indices
random_tsl_extracted$reindex <- reindex
# Remove targets with no response time
random_tsl_extracted <- random_tsl_extracted[!is.na(random_tsl_extracted$rt_col),]
# Calculate mean rt and rt_slope  -----------------------------------------------------------------------------------------------------
# Define variables
mean_rt <- NULL
rt_slope <- NULL
part_id <- NULL
domain <- NULL
modality <- NULL
type <- NULL
task <-NULL
old_rtsl <- NULL
rtsl_range <- NULL
upper_bound <- NULL
lower_bound <- NULL
# For each participant, extract id
# Assign domain, type, and modality
# Calculate and record mean_rt and rt_slope
for(id in list_part_id){
part_id <- append(part_id, id)
domain <- append(domain, "new_auditory")
type <- append (type, "random")
task <- append (task, "tsl")
modality <- append (modality, "non-linguistic")
mean_rt <- append(mean_rt, round(mean(random_tsl_extracted$rt_col[random_tsl_extracted$id==id]),digits=3))
rt_slope <- append (rt_slope, round(summary(lm(random_tsl_extracted$rt_col[random_tsl_extracted$id==id]~random_tsl_extracted$reindex[random_tsl_extracted$id==id]))$coefficient[2,1],digits = 4))
data_this_id <- (random_tsl_extracted[ which(random_tsl_extracted$id==id),])
this_range<- range(data_this_id$rt_col, na.rm = TRUE)
upper_bound <- append (upper_bound,this_range[1])
lower_bound <- append (lower_bound,this_range[2])
}
# Combine data for each participant
new_RTSL <- data.frame(part_id, task, domain, type,modality,mean_rt,upper_bound, lower_bound, rt_slope)
# for internal checking only: find mean rt_slope
#mean_rtsl_rt_slope <- mean (Rtsl$rt_slope)
# ******************** V. EXTRACT RELEVANT VISUAL DATA (ID, MODALITY, DOMAIN, TYPE, RT_SLOPE, MEAN_RT) BY CONDITION, THEN COMBINE 4 CONDITIONS TOGETHER**************************
# Separate trials 1-3 from trials 4-6----------------------------------------------------------------------------------------------------------------------------------------------------------
trials_1_3 <- visual_data_frame[ which(visual_data_frame$Run < 4), ]
trials_4_6 <- visual_data_frame[ which(visual_data_frame$Run > 3), ]
# ******************** CONDITION 1: STRUCTURED_LSL*******************
# Identify response times to target stimuli. Include times when participant responded while target was displayed, or during preceding/ following stimulus ---------------------------------------------
# Set up variables to loop through participants by trials and track the target
rt_col <- NULL
id <- NULL
trial <-NULL
target <- NULL
# Identify the rows when this condition's target was presented
structured_lsl_targets <- which(tolower(trials_1_3$ltarget)==tolower(trials_1_3$image))
# Isolate participants' response times.
# Include rows when the participant responded to stimuli adjacent to the target (i.e. any time that the participant pressed the button within one stimulus before or after the target)
for (i in structured_lsl_targets) {
# Isolate the ID number
id <- append(id, paste(trials_1_3[i,]$PartID))
# If the participant responded while the target was presented
if (!is.na(trials_1_3[i,] [,"l_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus
rt_col <- append (rt_col, trials_1_3[i,][,"l_block_trial_key_resp.rt"])}
# If the participant responded during the stimulus following the target
else if (!is.na(trials_1_3[i+1,] [,"l_block_trial_key_resp.rt"])){
# Count their response time as the duration that the target was presented (1000 ms) plus the response time to the following stimulus
rt_col[(match(i, structured_lsl_targets))] <- 1+trials_1_3[i+1, ][,"l_block_trial_key_resp.rt"]}
# Check if you are looking at the first target, which is always the first stimulus. If so, it does not have a preceeding target
else if (i>0){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_1_3[i,][,"l_block_trial_key_resp.rt"])}
# If the participant responded during the stimulus preceding the target
else if (!is.na(trials_1_3[i-1,] [,"l_block_trial_key_resp.rt"])){
# Count their response time as how much sooner they responded than when the stimulus was presented
rt_col[match(i, structured_lsl_targets)] <- 0-trials_1_3[i-1,][,"l_block_trial_key_resp.rt"]}
# If the participant did not respond to the target within the correct time frame
else if (is.na(trials_1_3[i,] [,"l_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_1_3[i,][,"l_block_trial_key_resp.rt"])}
}
# Match id and response times
structured_lsl_extracted <- data.frame(id,rt_col)
# Reindex the trial numbers for only trials with response times -----------------------------------------------------------------------------------------------------
# List unique participant IDs for this condition
list_part_id <- unique(structured_lsl_extracted$id)
# Find the number of targets shown to each participant
a <- NULL
for(i in list_part_id){a <- append(a,sum(structured_lsl_extracted$id==i))}
# For each participant, index the targets
reindex <- NULL
for (i in a) {reindex <- append (reindex, rep(1:i, 1))}
# Add the targets' indices
structured_lsl_extracted$reindex <- reindex
# Remove targets with no response time
structured_lsl_extracted <- structured_lsl_extracted[!is.na(structured_lsl_extracted$rt_col),]
# Calculate mean rt and rt_slope  -----------------------------------------------------------------------------------------------------
# Define variables
mean_rt <- NULL
rt_slope <- NULL
part_id <- NULL
domain <- NULL
modality <- NULL
type <- NULL
task <- NULL
RLSL<- NULL
slsl_range <- NULL
upper_bound <- NULL
lower_bound <- NULL
# For each participant, extract id
# Assign domain, type, and modality
# Calculate and record mean_rt and rt_slope
for(id in list_part_id){
part_id <- append(part_id, id)
domain <- append(domain, "visual")
type <- append (type, "structured")
modality <- append (modality, "linguistic")
task <- append (task, "LSL")
mean_rt <- append(mean_rt, round(mean(structured_lsl_extracted$rt_col[structured_lsl_extracted$id==id]),digits=3))
rt_slope <- append (rt_slope, round(summary(lm(structured_lsl_extracted$rt_col[structured_lsl_extracted$id==id]~structured_lsl_extracted$reindex[structured_lsl_extracted$id==id]))$coefficient[2,1],digits = 4))
data_this_id <- (structured_lsl_extracted[ which(structured_lsl_extracted$id==id),])
this_range<- range(data_this_id$rt_col, na.rm = TRUE)
upper_bound <- append (upper_bound,this_range[1])
lower_bound <- append (lower_bound,this_range[2])
}
# Combine data for each participant
SLSL <- data.frame(part_id, task, domain,type,modality,mean_rt, upper_bound, lower_bound, rt_slope)
# for internal checking only: find mean rt_slope
#mean_slsl_rt_slope <- mean (SLSL$rt_slope)
#slsl_test<-count(structured_lsl_extracted, "id")
#slsl_test$task<- "structured lsl"
# ******************** CONDITION 2: STRUCTURED_VSL*******************
# Identify response times to target stimuli. Include times when participant responded while target was displayed, or during preceding/ following stimulus ---------------------------------------------
# Set up variables to loop through participants by trials and track the target
rt_col <- NULL
id <- NULL
trial <-NULL
target <- NULL
# Identify the rows when this condition's target was presented
structured_vsl_targets <- which(tolower(trials_4_6$vtarget)==tolower(trials_4_6$image))
# Isolate participants' response times.
# Include rows when the participant responded to stimuli adjacent to the target (i.e. any time that the participant pressed the button within one stimulus before or after the target)
for (i in structured_vsl_targets) {
# Isolate the ID number
id <- append(id, paste(trials_4_6[i,]$PartID))
# If the participant responded while the target was presented
if (!is.na(trials_4_6[i,] [,"v_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus
rt_col <- append (rt_col, trials_4_6[i,][,"v_block_trial_key_resp.rt"])}
# If the participant responded during the stimulus following the target
else if (!is.na(trials_4_6[i+1,] [,"v_block_trial_key_resp.rt"])){
# Count their response time as the duration that the target was presented (1000 ms) plus the response time to the following stimulus
rt_col[(match(i, structured_vsl_targets))] <- 1+trials_4_6[i+1, ][,"v_block_trial_key_resp.rt"]}
# Check if you are looking at the first target, which is always the first stimulus. If so, it does not have a preceeding target
else if (i>0){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_4_6[i,][,"v_block_trial_key_resp.rt"])}
# If the participant responded during the stimulus preceding the target
else if (!is.na(trials_4_6[i-1,] [,"v_block_trial_key_resp.rt"])){
# Count their response time as how much sooner they responded than when the stimulus was presented
rt_col[match(i, structured_vsl_targets)] <- 0-trials_4_6[i-1,][,"v_block_trial_key_resp.rt"]}
# If the participant did not respond to the target within the correct time frame
else if (is.na(trials_4_6[i,] [,"v_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_4_6[i,][,"v_block_trial_key_resp.rt"])}
}
# Match id and response times
structured_vsl_extracted <- data.frame(id,rt_col)
# For internal checking only: Make sure that there are 24 per participant
#svsl_test<-count(structured_vsl_extracted, "id")
#svsl_test$task<- "structured vsl"
# Reindex the trial numbers for only trials with response times -----------------------------------------------------------------------------------------------------
# List unique participant IDs for this condition
list_part_id <- unique(structured_vsl_extracted$id)
# Find the number of targets shown to each participant
a <- NULL
for(i in list_part_id){a <- append(a,sum(structured_vsl_extracted$id==i))}
# For each participant, index the targets
reindex <- NULL
for (i in a) {reindex <- append (reindex, rep(1:i, 1))}
# Add the targets' indices
structured_vsl_extracted$reindex <- reindex
# Remove targets with no response time
structured_vsl_extracted <- structured_vsl_extracted[!is.na(structured_vsl_extracted$rt_col),]
# Calculate mean rt and rt_slope  -----------------------------------------------------------------------------------------------------
# Define variables
mean_rt <- NULL
rt_slope <- NULL
part_id <- NULL
domain <- NULL
task<- NULL
modality <- NULL
type <- NULL
SVSL<- NULL
svsl_range <- NULL
upper_bound <- NULL
lower_bound <- NULL
# For each participant, extract id
# Assign domain, type, and modality
# Calculate and record mean_rt and rt_slope
for(id in list_part_id){
task <- append (task, "VSL")
part_id <- append(part_id, id)
domain <- append(domain, "visual")
type <- append (type, "structured")
modality <- append (modality, "non-linguistic")
mean_rt <- append(mean_rt, round(mean(structured_vsl_extracted$rt_col[structured_vsl_extracted$id==id]),digits=3))
rt_slope <- append (rt_slope, round(summary(lm(structured_vsl_extracted$rt_col[structured_vsl_extracted$id==id]~structured_vsl_extracted$reindex[structured_vsl_extracted$id==id]))$coefficient[2,1],digits = 4))
data_this_id <- (structured_vsl_extracted[ which(structured_vsl_extracted$id==id),])
this_range<- range(data_this_id$rt_col, na.rm = TRUE)
upper_bound <- append (upper_bound,this_range[1])
lower_bound <- append (lower_bound,this_range[2])
}
# Combine data for each participant
SVSL <- data.frame(part_id,task, domain,type,modality,mean_rt,upper_bound, lower_bound,rt_slope)
# for internal checking only: find mean rt_slope
#mean_svsl_rt_slope <- mean (SVSL$rt_slope)
#svsl_test<-count(structured_vsl_extracted, "id")
#svsl_test$task<-"structured vsl"
# ******************** CONDITION 3: RANDOM_LSL*******************
# Identify response times to target stimuli. Include times when participant responded while target was displayed, or during preceding/ following stimulus ---------------------------------------------
# Set up variables to loop through participants by trials and track the target
rt_col <- NULL
id <- NULL
trial <-NULL
target <- NULL
# Identify the rows when this condition's target was presented
random_lsl_targets <- which(tolower(trials_4_6$ltarget)==tolower(trials_4_6$image))
# Isolate participants' response times.
# Include rows when the participant responded to stimuli adjacent to the target (i.e. any time that the participant pressed the button within one stimulus before or after the target)
for (i in random_lsl_targets) {
# Isolate the ID number
id <- append(id, paste(trials_4_6[i,]$PartID))
# If the participant responded while the target was presented
if (!is.na(trials_4_6[i,] [,"l_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus
rt_col <- append (rt_col, trials_4_6[i,][,"l_block_trial_key_resp.rt"])}
# If the participant responded during the stimulus following the target
else if (!is.na(trials_4_6[i+1,] [,"l_block_trial_key_resp.rt"])){
# Count their response time as the duration that the target was presented (1000 ms) plus the response time to the following stimulus
rt_col[(match(i, random_lsl_targets))] <- 1+trials_4_6[i+1, ][,"l_block_trial_key_resp.rt"]}
# Check if you are looking at the first target, which is always the first stimulus. If so, it does not have a preceeding target
else if (i>0){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_4_6[i,][,"l_block_trial_key_resp.rt"])}
# If the participant responded during the stimulus preceding the target
else if (!is.na(trials_4_6[i-1,] [,"l_block_trial_key_resp.rt"])){
# Count their response time as how much sooner they responded than when the stimulus was presented
rt_col[match(i, random_lsl_targets)] <- 0-trials_4_6[i-1,][,"l_block_trial_key_resp.rt"]}
# If the participant did not respond to the target within the correct time frame
else if (is.na(trials_4_6[i,] [,"l_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_4_6[i,][,"l_block_trial_key_resp.rt"])}
}
# Match id and response times
random_lsl_extracted <- data.frame(id,rt_col)
# For internal checking only: Make sure that there are 24 per participant
#rlsl_test<-count(random_lsl_extracted, "id")
#rlsl_test$task<- "random lsl"
# Reindex the trial numbers for only trials with response times -----------------------------------------------------------------------------------------------------
# List unique participant IDs for this condition
list_part_id <- unique(random_lsl_extracted$id)
# Find the number of targets shown to each participant
a <- NULL
for(i in list_part_id){a <- append(a,sum(random_lsl_extracted$id==i))}
# For each participant, index the targets
reindex <- NULL
for (i in a) {reindex <- append (reindex, rep(1:i, 1))}
# Add the targets' indices
random_lsl_extracted$reindex <- reindex
# Remove targets with no response time
random_lsl_extracted <- random_lsl_extracted[!is.na(random_lsl_extracted$rt_col),]
# Calculate mean rt and rt_slope  -----------------------------------------------------------------------------------------------------
# Define variables
mean_rt <- NULL
rt_slope <- NULL
part_id <- NULL
domain <- NULL
modality <- NULL
type <- NULL
task <- NULL
RLSL<- NULL
rlsl_range <- NULL
upper_bound <- NULL
lower_bound <- NULL
# For each participant, extract id
# Assign domain, type, and modality
# Calculate and record mean_rt and rt_slope
for(id in list_part_id){
part_id <- append(part_id, id)
domain <- append(domain, "visual")
type <- append (type, "random")
modality <- append (modality, "linguistic")
mean_rt <- append(mean_rt, round(mean(random_lsl_extracted$rt_col[random_lsl_extracted$id==id]),digits=3))
task <- append (task, "LSL")
rt_slope <- append (rt_slope, round(summary(lm(random_lsl_extracted$rt_col[random_lsl_extracted$id==id]~random_lsl_extracted$reindex[random_lsl_extracted$id==id]))$coefficient[2,1],digits = 4))
data_this_id <- (random_lsl_extracted[ which(random_lsl_extracted$id==id),])
rlsl_range<- range(data_this_id$rt_col, na.rm = TRUE)
upper_bound <- append (upper_bound,this_range[1])
lower_bound <- append (lower_bound,this_range[2])
}
# Combine data for each participant
RLSL <- data.frame(part_id,task, domain,type,modality,mean_rt, upper_bound, lower_bound, rt_slope)
# for internal checking only: find mean rt_slope
mean_rlsl_rt_slope <- mean (RLSL$rt_slope)
# ******************** CONDITION 4: RANDOM_VSL*******************
# Identify response times to target stimuli. Include times when participant responded while target was displayed, or during preceding/ following stimulus ---------------------------------------------
# Set up variables to loop through participants by trials and track the target
rt_col <- NULL
id <- NULL
trial <-NULL
target <- NULL
# Identify the rows when this condition's target was presented
random_vsl_targets <- which(tolower(trials_1_3$vtarget)==tolower(trials_1_3$image))
# Isolate participants' response times.
# Include rows when the participant responded to stimuli adjacent to the target (i.e. any time that the participant pressed the button within one stimulus before or after the target)
for (i in random_vsl_targets) {
# Isolate the ID number
id <- append(id, paste(trials_1_3[i,]$PartID))
# If the participant responded while the target was presented
if (!is.na(trials_1_3[i,] [,"v_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus
rt_col <- append (rt_col, trials_1_3[i,][,"v_block_trial_key_resp.rt"])}
# If the participant responded during the stimulus following the target
else if (!is.na(trials_1_3[i+1,] [,"v_block_trial_key_resp.rt"])){
# Count their response time as the duration that the target was presented (1000 ms) plus the response time to the following stimulus
rt_col[(match(i, random_vsl_targets))] <- 1+trials_1_3[i+1, ][,"v_block_trial_key_resp.rt"]}
# Check if you are looking at the first target, which is always the first stimulus. If so, it does not have a preceeding target
else if (i>0){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_1_3[i,][,"v_block_trial_key_resp.rt"])}
# If the participant responded during the stimulus preceding the target
else if (!is.na(trials_1_3[i-1,] [,"v_block_trial_key_resp.rt"])){
# Count their response time as how much sooner they responded than when the stimulus was presented
rt_col[match(i, random_vsl_targets)] <- 0-trials_1_3[i-1,][,"v_block_trial_key_resp.rt"]}
# If the participant did not respond to the target within the correct time frame
else if (is.na(trials_1_3[i,] [,"v_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus (NA)
rt_col <- append (rt_col, trials_1_3[i,][,"v_block_trial_key_resp.rt"])}
}
# Match id and response times
random_vsl_extracted <- data.frame(id,rt_col)
# Reindex the trial numbers for only trials with response times -----------------------------------------------------------------------------------------------------
# List unique participant IDs for this condition
list_part_id <- unique(random_vsl_extracted$id)
# Find the number of targets shown to each participant
a <- NULL
for(i in list_part_id){a <- append(a,sum(random_vsl_extracted$id==i))}
# For each participant, index the targets
reindex <- NULL
for (i in a) {reindex <- append (reindex, rep(1:i, 1))}
# Add the targets' indices
random_vsl_extracted$reindex <- reindex
# Remove targets with no response time
random_vsl_extracted <- random_vsl_extracted[!is.na(random_vsl_extracted$rt_col),]
# Calculate mean rt and rt_slope  -----------------------------------------------------------------------------------------------------
# Define variables
mean_rt <- NULL
rt_slope <- NULL
part_id <- NULL
domain <- NULL
modality <- NULL
type <- NULL
task <-NULL
RVSL <- NULL
rvsl_range <- NULL
upper_bound <- NULL
lower_bound <- NULL
# For each participant, extract id
# Assign domain, type, and modality
# Calculate and record mean_rt and rt_slope
for(id in list_part_id){
part_id <- append(part_id, id)
domain <- append(domain, "visual")
type <- append (type, "random")
task <- append (task, "VSL")
modality <- append (modality, "non-linguistic")
mean_rt <- append(mean_rt, round(mean(random_vsl_extracted$rt_col[random_vsl_extracted$id==id]),digits=3))
rt_slope <- append (rt_slope, round(summary(lm(random_vsl_extracted$rt_col[random_vsl_extracted$id==id]~random_vsl_extracted$reindex[random_vsl_extracted$id==id]))$coefficient[2,1],digits = 4))
data_this_id <- (random_vsl_extracted[ which(random_vsl_extracted$id==id),])
this_range<- range(data_this_id$rt_col, na.rm = TRUE)
upper_bound <- append (upper_bound,this_range[1])
lower_bound <- append (lower_bound,this_range[2])
}
# Combine data for each participant
RVSL <- data.frame(part_id, task, domain, type,modality,mean_rt,upper_bound, lower_bound, rt_slope)
# for internal checking only: find mean rt_slope
mean_rvsl_rt_slope <- mean (RVSL$rt_slope)
# Bind conditions together--------------------------------------------------------------------------------------------------------------------------------------------------
# Bind visual cconditions
visual_rt<- rbind(RLSL, RVSL, SLSL, SVSL)
# Bind auditory conditions
old_auditory_rt<- rbind(old_RTSL, old_RSSL, old_STSL, old_SSSL)
# Bind auditory conditions
new_auditory_rt<- rbind(new_RTSL, new_RSSL, new_STSL, new_SSSL)
# Bind all conditions
indiv_rt <- rbind(RLSL, old_RSSL, new_RSSL, old_RTSL, new_RTSL, RVSL, SLSL, old_SSSL, new_SSSL, old_STSL, new_STSL, SVSL)
setwd("../output_files/")
write.csv(indiv_rt, "4_runs_rt_slope_indiv.csv")
# For internal checking only:
#targets_per_task<-rbind(slsl_test,sssl_test, stsl_test, svsl_test)
#write.csv(targets_per_task, "nov_pilot_targets.csv")
# Find group-level mean accuracy accross tasks------------------------------------------------------------------------------------
group_rt_slope <- NULL
mean_struct_rt_slope <- NULL
mean_rand_rt_slope <- NULL
task <- NULL
# Find mean LSL accuracy across participants
task <- append (task, paste ("lsl"))
mean_struct_rt_slope <- append(mean_struct_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="structured"
& indiv_rt$task== "LSL"), ]$rt_slope), digits =3))
mean_rand_rt_slope <- append(mean_rand_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="random"
& indiv_rt$task== "LSL"), ]$rt_slope), digits =3))
# Find mean SSL accuracy across participants
task <- append (task, paste ("ssl"))
mean_struct_rt_slope <- append(mean_struct_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="structured"
& indiv_rt$task== "SSL"), ]$rt_slope), digits =3))
mean_rand_rt_slope <- append(mean_rand_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="random"
& indiv_rt$task== "SSL"), ]$rt_slope), digits =3))
# Find mean TSL accuracy across participants
task <- append (task, paste ("tsl"))
mean_struct_rt_slope <- append(mean_struct_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="structured"
& indiv_rt$task== "TSL"), ]$rt_slope), digits =3))
mean_rand_rt_slope <- append(mean_rand_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="random"
& indiv_rt$task== "TSL"), ]$rt_slope), digits =3))
# Find mean VSL accuracy across participants
task <- append (task, paste ("vsl"))
mean_struct_rt_slope <- append(mean_struct_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="structured"
& indiv_rt$task== "VSL"), ]$rt_slope), digits =3))
mean_rand_rt_slope <- append(mean_rand_rt_slope, round(mean(indiv_rt[ which(indiv_rt$type=="random"
& indiv_rt$task== "VSL"), ]$rt_slope), digits =3))
# Combine group accuracies into one data frame
group_accuracy <- data.frame(cbind(task, mean_rand_rt_slope, mean_struct_rt_slope))
setwd("../output_files/")
write.csv(group_accuracy, "4_runs_rt_slope_group.csv")
